A primeira fase consistir em avaliar o impacto e comunicar os stakeholders.

Validar nas ferramentas de observbailidade as principais m√©tricas de degrada√ß√£o do servi√ßo como tempo de resposta, erros e trhrougput

Verificar o estado do servi√ßo, pods no Kubernetes

Validar recursos de infraestrutura dos nodes e pods

Investigar conectividade, lat√™ncia e recursos do RDS

Verificar depend√™ncias externas

Analisar hist√≥rico recente

Registrar todas as evid√™ncias

Ferramentas


Categoria	Ferramenta	Uso no diagn√≥stico
Kubernetes CLI	kubectl	Inspe√ß√£o de pods, deployments, eventos e m√©tricas no cluster
Monitoramento	Datadog	Visualizar m√©tricas de lat√™ncia, erros, tr√°fego e recursos
Logs	Datadog Logs / kubectl logs	Analisar erros e timeouts na aplica√ß√£o
Banco de Dados	AWS Console (RDS) / CloudWatch	Checar m√©tricas do RDS (CPU, conex√µes, lat√™ncia)
Rede	nc (netcat) / telnet	Testar conectividade e lat√™ncia com o RDS


comandos

1. Estado geral dos pods e eventos

kubectl get pods -n payment -o wide
kubectl describe pod <nome-do-pod> -n payment
kubectl get events -n payment --sort-by=.lastTimestamp

2. Logs da aplica√ß√£o
kubectl logs <nome-do-pod> -n payment --tail=200
kubectl logs <nome-do-pod> -n payment --since=10m

3. M√©tricas de recursos
kubectl top pods -n payment
kubectl top pod <nome-do-pod> -n payment --containers

4. Teste de conectividade com o RDS
kubectl exec -it <nome-do-pod> -n payment -- nc -vz <endpoint-rds> 5432


5. M√©tricas do RDS no CloudWatch
CPUUtilization

DatabaseConnections

FreeableMemory

ReadLatency / WriteLatency

6. Hist√≥rico de deploys no ArgoCD

argocd app history payment-api
argocd app get payment-api


üîπ Poss√≠veis Causas (Hip√≥teses Iniciais)
Problema no banco RDS
Lat√™ncia ou indisponibilidade moment√¢nea
Conex√µes saturadas (max_connections)
Rede (lat√™ncia entre EKS e RDS)
Problema de rede no cluster
Lat√™ncia no VPC CNI
Security Groups ou NACL alterados
Satura√ß√£o de recursos no servi√ßo
CPU/Memory throttling nos pods
Fila de requisi√ß√µes acumulando
Depend√™ncia externa degradada
API de terceiros usada pelo payment-api
Configura√ß√£o de pool de conex√µes
Pool insuficiente ou mal configurado, causando timeouts


a√ß√µes Imediatas de Mitiga√ß√£o
1. Comunicar e acionar o time certo
 - Notificar time de desenvolvimento e DBAs sobre o incidente.
- Abrir war room (chat/call) para centralizar informa√ß√µes e decis√µes.
- Informar stakeholders de neg√≥cio sobre o impacto e medidas em andamento.

2. Escalar horizontalmente o servi√ßo
Aumentar temporariamente o n√∫mero de r√©plicas do payment-api para diluir carga:
  - kubectl scale deploy payment-api -n payment --replicas=10
   - Monitorar se a lat√™ncia melhora.

3. Reduzir carga no banco RDS
- Ativar cache (se dispon√≠vel) para consultas repetitivas.
- Desabilitar ou adiar rotinas n√£o cr√≠ticas que usam o banco (jobs, relat√≥rios).
- Se poss√≠vel, aumentar temporariamente a capacidade do RDS (scale-up).

4. Ajustar timeouts e retries
- Reduzir o tempo de espera de chamadas para o RDS para evitar threads presas.
- Garantir que o servi√ßo degrade de forma controlada (ex.: fila, fallback).

5. Failover ou read replica
- Se o RDS estiver degradado e houver read replica ou inst√¢ncia standby, considerar failover.
- Validar com DBA antes para evitar perda de dados.

.6 Monitoramento em tempo real
- Criar painel tempor√°rio no Datadog com:
- Lat√™ncia da API
- Erros 5xx
- Conex√µes e CPU do RDS

